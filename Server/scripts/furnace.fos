#ifndef FURNACE
#define FURNACE

#include "_defines.fos"
#include "_macros.fos"
#include "_colors.fos"
#include "furnace_h.fos"
#include "firestarter_h.fos"



/*
bool hasItems(Critter&cr,uint16[]pids,int slot=-1)
{
	return getItems(cr,pids,slot).length()>0;
}*/

bool ShowFurnaceMenu(Critter& cr, Item@ furnace) 
{
	cr.ShowScreen( SCREEN_DIALOGBOX, 3, "furnace@dlg_FurnaceMenu" );

	cr.StatBase[ ST_VAR0 ] = furnace.Id;
	string info;
	Item@[] MaterialsCheck;
	furnace.GetItems( uint( -1 ), MaterialsCheck );
	Item@ material = null;
	int check_kg = 0;
	
	if( furnace.MAX_FUEL == 0 ) 
        furnace.MAX_FUEL = 24000;

	if ( furnace.STATE != 0 && furnace.STATE != 1 )
		furnace.STATE = 0;
		
	info += "|0x3CF800 Топливо: |0xFFFF00 " + furnace.CURRENT_FUEL * 100 / furnace.MAX_FUEL + "|0x3CF800 % Температура: |0xFFFF00 " + furnace.FIRE_STRENGTH + "|0x3CF800 C.";
	info += "\n|0x3CF800 Расплавленные продукты:";
	
	if( furnace.FURN_IRON > 0 ) 
	{
		info += "\n|0x3CF800 Железо: |0xFFFF00 " + ( furnace.FURN_IRON / 1000.0f ) + "|0x3CF800  кг."; 
		check_kg++;
	}
	
	if( furnace.FURN_GOLD > 0 ) 
	{
		info += "\n|0x3CF800 Золото: |0xFFFF00 " + ( furnace.FURN_GOLD / 1000.0f ) + "|0x3CF800  кг."; 
		check_kg++; 
	}
	
	if( furnace.FURN_LEAD > 0 ) 
	{
		info += "\n|0x3CF800 Свинец: |0xFFFF00 " + ( furnace.FURN_LEAD / 1000.0f ) + "|0x3CF800  кг."; 
		check_kg++;
	}
	
	if( furnace.FURN_COPPER > 0 ) 
	{
		info += "\n|0x3CF800 Медь: |0xFFFF00 " + ( furnace.FURN_COPPER / 1000.0f ) + "|0x3CF800  кг."; 
		check_kg++;
	}
	
	if( furnace.FURN_GLASS > 0 ) 
	{
		info += "\n|0x3CF800 Стекло: |0xFFFF00 " + ( furnace.FURN_GLASS / 1000.0f ) + "|0x3CF800  кг."; 
		check_kg++;
	}
	
	if ( check_kg < 1 ) 
		info += "\n|0xFFFF00 Продукты отсутствуют!";
	
	cr.Say( SAY_DIALOGBOX_TEXT, info );
	
	cr.Say( SAY_DIALOGBOX_BUTTON( 0 ), "Содержимое" );
	if( furnace.STATE == 0 )
		cr.Say( SAY_DIALOGBOX_BUTTON( 1 ), "Разжечь огонь" );
	else
		cr.Say( SAY_DIALOGBOX_BUTTON( 1 ), "Потушить огонь" );
	cr.Say( SAY_DIALOGBOX_BUTTON( 2 ), "Добавить горючее" );
	return true;
}


/*		SETFLAG( furnace.Flags, ITEM_CAN_USE );
		UNSETFLAG( furnace.Flags, ITEM_CAN_PICKUP );*/

void dlg_FurnaceMenu( Critter& cr, uint answerI, string& answerS )
{
	Item@ furnace = GetItem( cr.StatBase[ ST_VAR0 ] );

	if( !FLAG( furnace.Flags, ITEM_CAN_USE ) )
		SETFLAG( furnace.Flags, ITEM_CAN_USE );

	if( FLAG( furnace.Flags, ITEM_CAN_PICKUP ) )
		UNSETFLAG( furnace.Flags, ITEM_CAN_PICKUP );

    if( answerI == 0 ) 
    {
		if( furnace.STATE > 0 ) 
		{
			Item@[] Tools;
			uint tools_count = cr.GetItems( SLOT_HAND1, Tools );
			if( tools_count != 0 ) 
			{
				cr.ShowContainer( null, furnace, TRANSFER_HEX_CONT_DOWN );
				return;
			} 
			else 
			{
				if ( cr.Stat[ ST_INTELLECT ] > 4 ) 
				{
					cr.Say( SAY_NETMSG, "|0xFFFF00 Вам кажется, что раскалённую печь лучше не трогать голыми руками.\n|0xFFFF00 Подсказка: возьмите лопату, инструменты или монтировку в руку и попробуйте ещё раз." );
					return;
				} 
				else 
				{
					InjureCritter( cr, 3, DAMAGE_FIRE, 0, 0 );
					cr.Say( SAY_NETMSG, "|0xFFFF00 Вы обожглись!" );
					return;
				}
			}
		}
		else
		{
			cr.ShowContainer( null, furnace, TRANSFER_CRIT_LOOT );	
		}
	}

	if( answerI == 1 )
	{
		if( furnace.STATE == 0 )
		{
			Item@ fuelto = null;
			for( uint i = 0, j = 2; i < j; i++) 
			{
				@fuelto = @cr.GetItem( Igniters[i], -1 );
				if( valid( fuelto ) ) 
					break; 
			}
				
			if( valid( fuelto ) && TurnFurnaceOn( cr, fuelto, furnace ) ) 
			{
				uint[] values = { furnace.Id, cr.Id };
				furnace.EVENT = CreateTimeEvent( REAL_SECOND( 0 ), "e_FurnaceStage", values, true);
			}			
			return; 			
		}
		else 
		{
			Item@ fuelto = null;
			uint check = 0;
			
			for( uint i = 0, j = 3; i < j; i++ ) 
			{
				@fuelto = @cr.GetItem( WaterSource[i], -1 );
				if( valid( fuelto ) ) 
				{ 
					check = 1;
					break; 
				}
			}
			
			if ( check != 1 )
				cr.Say( SAY_NETMSG, "|0xFFFF00 У вас нет воды." );				
			
			if( valid( fuelto ) ) 
				TurnFurnaceOff( cr, fuelto, furnace );	

			return; 
		}
	}		

	if( answerI == 2 )
	{
		Item@ fuel = null;
		for( uint i = 0, j = 1; i < j; i++ ) 
		{
			@fuel = @cr.GetItem( FireFuel[i], -1 );		
			if( valid( fuel ) ) 
				break; 
		}
		
		if( valid( fuel ) ) 
			FeedTheFurnace( cr, fuel, furnace );

		return; 
	}
}

bool FeedTheFurnace( Critter& cr, Item& item, Item& furnace )
{
	Map@ map = cr.GetMap();

	if( !valid( furnace ) )
		return false;

	if( !valid( item ) )
		return false;

	if( furnace.CURRENT_FUEL == furnace.MAX_FUEL) 
	{	
		cr.Say( SAY_NETMSG, "|0xFFFF00 Горючее уже некуда подкладывать, дайте ему прогореть!" );
		return false;
	}
	
	_CritAnimateUse(cr);
	
	if( item.GetProtoId() == PID_COAL ) 
	{
		furnace.CURRENT_FUEL = MIN( furnace.CURRENT_FUEL + 5400, furnace.MAX_FUEL );
		cr.Say( SAY_EMOTE, "Подкладывает уголь" );
		//map.PlaySound( "ROCK.ACM", furnace.HexX, furnace.HexY, 3 );
		
	} 
	else 
	{	
		furnace.CURRENT_FUEL = MIN( furnace.CURRENT_FUEL + 1800, furnace.MAX_FUEL );
		cr.Say( SAY_EMOTE, "Подкладывает топливо" );
		//map.PlaySound( "BRDSWELL.ACM", furnace.HexX, furnace.HexY, 3 );
	}

	int occupancy_rate = ( furnace.CURRENT_FUEL * 100 / furnace.MAX_FUEL );
	cr.Say( SAY_NETMSG, "|0xFFFF00 Кострище заполнено горючими материалами на " +occupancy_rate+ " %" );
	
	_SubItem( item, 1 );
	
	return true;
}

bool TurnFurnaceOff( Critter& cr, Item& item, Item& furnace )
{
	Map@ map = cr.GetMap();
    if( !valid( map ) ) 
    	return false;
	
	uint16 itemPid = item.GetProtoId();
	if( WaterSource.find( itemPid ) != -1 ) 
	{	
		_SubItem( item, 1 );
		cr.AddItem( PID_BOTTLE_GLASS, 1 );
	}
		
	if( furnace.STATE == 0 && furnace.CURRENT_FUEL >= 0 ) 
	{	
		cr.Say( SAY_EMOTE, "выливает воду" );
		//map.PlaySound( "splash.ogg", furnace.HexX, furnace.HexY, 5 );
		
		if( furnace.CURRENT_FUEL == 0 )
			cr.Say( SAY_NETMSG, "|0xFF0000 Вы попусту вылили воду, разве так стоит обращаться со столь ценной жидкостью?" );
		else 
		{
			cr.Say( SAY_NETMSG, "|0xFF0000 Вы залили водой топливо! Теперь часть непригодна для розжига..." );
			furnace.CURRENT_FUEL = MAX( furnace.CURRENT_FUEL - Random( 1800, 5400 ), 0 );
		}
		return false;
	}
	
	if( furnace.STATE >= 1 ) 
	{
		furnace.STATE = 0;
		furnace.CURRENT_FUEL = 0;
		cr.Say( SAY_EMOTE, "тушит пламя" );
		//map.PlaySound( "STEAM1.ACM", furnace.HexX, furnace.HexY, 5 );
		
		//ProtoItem@ proto = GetProtoItem( PID_FURNACE_SMALL );
		//furnace.PicMap = proto.PicMap;
		//setAnimState( furnace );
		
	//	Item@ fireFX = map.AddItem( furnace.HexX, furnace.HexY, PID_SMOKE, 1 );
		
	//	uint[] values = { fireFX.Id };
	//	fireFX.EVENT = CreateTimeEvent( AFTER( REAL_SECOND( 1 ) ),"furnace@e_fireFX", values, true );
	}
	return true;
}

bool TurnFurnaceOn( Critter& cr, Item& item, Item& furnace )
{
	Map@ map = cr.GetMap();
    if( !valid( map ) )
    	return false; 
	
	if( furnace.STATE == 1 ) 
	{
		cr.Say( SAY_NETMSG, "|0xFFFF00 Огонь уже вовсю полыхает." );
		return false;
	}
	
	if( furnace.CURRENT_FUEL == 0 ) 
	{
		cr.Say( SAY_NETMSG, "|0xFFFF00 Тут нечего разжигать, найдите подходящее топливо." );
		return false;
	}
	
	if( furnace.STATE == 0 && furnace.CURRENT_FUEL > 0 ) 
	{
		if( item.GetProtoId() == PID_FLINT && Random( 1, 300 ) > cr.Skill[SK_OUTDOORSMAN] ) 
		{
			_SubItem( item, 1 );
			cr.Say( SAY_NETMSG, "|0xFFFF00 Вы сточили поджиг." );
		}
		
		furnace.STATE++;
		_CritAnimateUse(cr);
		cr.Say( SAY_EMOTE, "разжигает огонь" );
		
		uint[] values = {furnace.Id};
		CreateTimeEvent( REAL_SECOND( 0 ) , "e_BurnFurnace", values, true );
		//furnace.PicMap = PIC_FURNACE_ANIM_ON;
		//setAnimState( furnace );
	}
	return true;
}

uint e_BurnFurnace( uint[]@ values )
{
	Item@ furnace = GetItem( values[0] );
	if( valid( furnace ) ) 
	{
		furnace.CURRENT_FUEL = ( furnace.CURRENT_FUEL - FUEL_BURN_AMMOUNT );
		if( furnace.CURRENT_FUEL > 0 ) 
		{
			uint16 hexX = 0, hexY = 0;
			Map @map = furnace.GetMapPosition( hexX, hexY );
			//map.PlaySound( "campfire.ogg", furnace.HexX, furnace.HexY, 3 );
			
			if( map.GetRain() == 0 || Random( 1, 3 ) != 3 ) 
				return FIRE_BURNING_TIME;
		}
	
		furnace.STATE = 0;
		//ProtoItem@ proto = GetProtoItem( PID_FURNACE_SMALL );
		//furnace.PicMap = proto.PicMap;
		//setAnimState( furnace );
		//furnace.Update();
		//uint16 hexX=0, hexY=0;
		//Map @map = furnace.GetMapPosition( hexX, hexY );
		//map.PlaySound( "STEAM1.ACM", furnace.HexX, furnace.HexY, 5 );
	}
	return 0;
}

uint e_fireFX( uint[]@ values )
{
	uint itemId = values[0];
	Item@ e_fireFX = GetItem( itemId );
	if( valid( e_fireFX ) )  
	{
		DeleteItem( e_fireFX );
	}
	return 0;
}

uint e_FurnaceStage( uint[]@ values )
{
	Item@ furnace = GetItem( values[0] );
	if( !valid( furnace ) )
		return 0;	
	
	Map@ map = GetMap( furnace.MapId );
	
	if( !valid( map ) )
		return 0;	
	
	if ( furnace.FIRE_STRENGTH < 0 )
		furnace.FIRE_STRENGTH = 0;

	if ( furnace.STATE == 0 && furnace.FIRE_STRENGTH > 0 ) 
	{
		furnace.FIRE_STRENGTH -= FUEL_BURN_AMMOUNT;

		if ( furnace.FIRE_STRENGTH < 0 )
			furnace.FIRE_STRENGTH = 0;

		return FIRE_BURNING_TIME;
	}
	
	if ( furnace.STATE == 1 && furnace.FIRE_STRENGTH < 1800 ) {
		furnace.FIRE_STRENGTH += FUEL_BURN_AMMOUNT;
		return FIRE_BURNING_TIME;
	}

	Item@[] resources;
	int count = furnace.GetItems( uint ( -1 ) , resources );
	int burn_check = 0;

	if( furnace.FURN_IRON > 0 ) 
	{
		ProtoItem@ MaterialProto = GetProtoItem( PID_IRON_BAR );	
		burn_check = furnace.FURN_IRON - MaterialProto.Weight;
			
		if ( ( burn_check ) >= 0 ) 
		{
			furnace.FURN_IRON = burn_check;
			furnace.AddItem( PID_IRON_BAR, 1, 0 );
		}
	}
	
	if( furnace.FURN_GOLD > 0 ) 
	{
		ProtoItem@ MaterialProto = GetProtoItem( PID_GOLDEN_BAR );	
		burn_check = furnace.FURN_GOLD - MaterialProto.Weight;
			
		if ( ( burn_check ) >= 0 ) 
		{
			furnace.FURN_GOLD = burn_check;
			furnace.AddItem( PID_GOLDEN_BAR, 1, 0 );
		}
	}
	
	if( furnace.FURN_COPPER > 0 ) 
	{
		ProtoItem@ MaterialProto = GetProtoItem( PID_COPPER_BAR );	
		burn_check = furnace.FURN_COPPER - MaterialProto.Weight;
		
		if ( ( burn_check ) >= 0 ) 
		{
			furnace.FURN_COPPER = burn_check;
			furnace.AddItem( PID_COPPER_BAR, 1, 0 );
		}
	}
	
	if( furnace.FURN_LEAD > 0 ) 
	{
		ProtoItem@ MaterialProto = GetProtoItem( PID_LEAD_INGOT );	
		burn_check = furnace.FURN_LEAD - MaterialProto.Weight;
		
		if ( ( burn_check ) >= 0 ) 
		{
			furnace.FURN_LEAD = burn_check;
			furnace.AddItem( PID_LEAD_INGOT, 1, 0 );
		}
	}
	
	if( furnace.FURN_GLASS > 0 ) 
	{
		ProtoItem@ MaterialProto = GetProtoItem( PID_GLASS_BAR );	
		burn_check = furnace.FURN_GLASS - MaterialProto.Weight;
		
		if ( ( burn_check ) >= 0 ) 
		{
			furnace.FURN_GLASS = burn_check;
			furnace.AddItem( PID_GLASS_BAR, 1, 0 );
		}
	}
	
	if( count > 0 ) 
	{
		if ( furnace.STATE == 0 ) 
			return FIRE_BURNING_TIME;
		
		int n = Random( 0, count - 1 );
		uint type;
		uint16 materialPid = resources[n].GetProtoId();
		ProtoItem@ MaterialProto = GetProtoItem( materialPid );
		type = BURN_TYPE_MISC;
		
		if( MaterialProto.Type == ITEM_TYPE_MISC ) 
		{
			if( MaterialProto.Material == MATERIAL_STONE ) 
			{ // докончить
				if ( materialPid == PID_METAL_ORE || materialPid == PID_GOLD_NUGGET || materialPid == PID_GOLD_ORE || materialPid == PID_COPPER_ORE 
					|| materialPid == PID_COPPER_NUGGET || materialPid == PID_LEAD_NUGGET || materialPid == PID_LEAD_ORE) 
				{
					type = BURN_TYPE_ORE;
				}
			} 
			else 
			{
				if( materialPid == PID_IRON_BAR || materialPid == PID_GOLDEN_BAR || materialPid == PID_COPPER_BAR || materialPid == PID_LEAD_INGOT || materialPid == PID_GLASS_BAR ) 
				{
					type = 101; // Памятка: это необходимо для того, чтобы горело всё, кроме продуктов
				} 
				else
					type = BURN_TYPE_MISC;
			}
		} 

		if( MaterialProto.Type == ITEM_TYPE_ARMOR )
			type = BURN_TYPE_ARMOUR;

		if( MaterialProto.Type == ITEM_TYPE_WEAPON )
			type = BURN_TYPE_WEAPON;
		
		if ( type != 101 ) 
		{
			BurnItem ( furnace, materialPid, type );
			_SubItem( resources[n], 1 );
		}
	}
	return FIRE_BURNING_TIME;
}

void BurnItem(  Item& furnace, uint16 materialPid, uint16 type )
{
    Map@ map = GetMap( furnace.MapId );
    ProtoItem@ MaterialProto = GetProtoItem( materialPid );
    uint16 hx = furnace.HexX, hy = furnace.HexY;
    
	if( furnace.FIRE_STRENGTH == 0 || furnace.STATE == 0 )
		return;
	
   // Item@ fireFX = map.AddItem( furnace.HexX, furnace.HexY, PID_SMOKE, 1 );
   // uint[] values = { fireFX.Id };
    //fireFX.EVENT = CreateTimeEvent( AFTER( REAL_SECOND( 1 ) ),"firestarter@e_fireFX", values, true );
    
	float burn_k = 0.0f;
	
    switch( type )
    {
        case( BURN_TYPE_ORE ):
            burn_k = ORE_K;
            break;
        case( BURN_TYPE_MISC ):
            burn_k = MISC_K;
            break;    
        case( BURN_TYPE_ARMOUR ):
            burn_k = ARMOUR_K;
            break;    
        case( BURN_TYPE_WEAPON ):
            burn_k = WEAPON_K;
            break;
        default:
            burn_k = 0.5f;
            break;
    }

	string resourceType;
    uint16 SmeltingTemp;
    
    switch( MaterialProto.Material )
    {
        case( MATERIAL_METAL ):
            resourceType = "FURN_IRON";
            SmeltingTemp = BURN_IRON;
            break;
        case( MATERIAL_GOLD ):
            resourceType = "FURN_GOLD";
            SmeltingTemp = BURN_GOLD;
            break;
        case( MATERIAL_LEAD ):
            resourceType = "FURN_LEAD";
            SmeltingTemp = BURN_LEAD;
            break;
        case( MATERIAL_COPPER ):
            resourceType = "FURN_COPPER";
            SmeltingTemp = BURN_COPPER;
            break;
        case( MATERIAL_GLASS ):
            resourceType = "FURN_GLASS";
            SmeltingTemp = BURN_GLASS;
            break;
        case( MATERIAL_STONE ):
        {
            switch( materialPid )
            {
                case( PID_METAL_ORE ):
                    resourceType = "FURN_IRON";
                    SmeltingTemp = BURN_IRON;
                    break;
                case( PID_GOLD_NUGGET ):
                case( PID_GOLD_ORE ):
                    resourceType = "FURN_GOLD";
                    SmeltingTemp = BURN_GOLD;
                    break;
                case( PID_COPPER_ORE ):
                case( PID_COPPER_NUGGET ):
                    resourceType = "FURN_COPPER";
                    SmeltingTemp = BURN_COPPER;
                    break;
                case( PID_LEAD_NUGGET ):
                case( PID_LEAD_ORE ):
                    resourceType = "FURN_LEAD";
                    SmeltingTemp = BURN_LEAD;
                    break;
            }
            break;
        }
        default:
            SmeltingTemp = 600; // плавление других предметов
            break;
    }

	if ( furnace.FIRE_STRENGTH >= SmeltingTemp && SmeltingTemp != 0 ) 
	{
		if ( resourceType == "FURN_IRON" )
			furnace.FURN_IRON += ( MaterialProto.Weight * burn_k );

		if ( resourceType == "FURN_GOLD" )
			furnace.FURN_GOLD += ( MaterialProto.Weight * burn_k );

		if ( resourceType == "FURN_COPPER" )
			furnace.FURN_COPPER += ( MaterialProto.Weight * burn_k );
	
		if ( resourceType == "FURN_LEAD" )
			furnace.FURN_LEAD += ( MaterialProto.Weight * burn_k );

		if ( resourceType == "FURN_GLASS" )
			furnace.FURN_GLASS += ( MaterialProto.Weight * burn_k );
	}
	return;
}

#endif //FURNACE